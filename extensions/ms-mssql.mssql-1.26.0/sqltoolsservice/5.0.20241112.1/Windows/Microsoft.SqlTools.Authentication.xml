<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlTools.Authentication</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlTools.Authentication.AccessToken">
            <summary>
            Represents an access token data object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AccessToken.Token">
            <summary>
            OAuth 2.0 JWT encoded access token string
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AccessToken.ExpiresOn">
            <summary>
            Expiry date of token
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.AccessToken.#ctor(System.String,System.DateTimeOffset)">
            <summary>
            Default constructor for Access Token object
            </summary>
            <param name="token">Access token as string</param>
            <param name="expiresOn">Expiry date</param>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.AuthenticationMethod">
            <summary>
            Supported Microsoft Entra authentication modes
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.AuthenticationParams">
            <summary>
            Parameters to be passed to <see cref="T:Microsoft.SqlTools.Authentication.Authenticator"/> to request an access token
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.AuthenticationMethod">
            <summary>
            Authentication method to be used by <see cref="T:Microsoft.SqlTools.Authentication.Authenticator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.Authority">
            <summary>
            Authority URL, e.g. https://login.microsoftonline.com/
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.Audience">
            <summary>
            Audience for which access token should be acquired, e.g. common, organizations, consumers.
            It can also be a tenant Id when authenticating multi-tenant application accounts.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.Resource">
            <summary>
            Resource URL, e.g. https://database.windows.net/
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.Scopes">
            <summary>
            Array of scopes for which access token is requested.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.ConnectionId">
            <summary>
            <see cref="T:System.Guid"/> Connection Id, that will be passed to Microsoft Entra when requesting access token.
            It can be used for tracking Microsoft Entra authentication request status if needed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.AuthenticationParams.UserName">
            <summary>
            User name to be provided as userhint when acquiring access token.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.AuthenticationParams.#ctor(Microsoft.SqlTools.Authentication.AuthenticationMethod,System.String,System.String,System.String,System.String[],System.String,System.Guid)">
            <summary>
            Default constructor
            </summary>
            <param name="authMethod">Authentication Method to be used.</param>
            <param name="authority">Authority URL</param>
            <param name="audience">Audience</param>
            <param name="resource">Resource for which token is requested.</param>
            <param name="scopes">Scopes for access token</param>
            <param name="userName">User hint information</param>
            <param name="connectionId">Connection Id for tracing Microsoft Entra authentication request</param>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Authenticator">
            <summary>
            Provides APIs to acquire access token using MSAL.NET v4 with provided <see cref="T:Microsoft.SqlTools.Authentication.AuthenticationParams"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Authenticator.GetToken(Microsoft.SqlTools.Authentication.AuthenticationParams,System.Threading.CancellationToken)">
            <summary>
            Acquires access token synchronously.
            </summary>
            <param name="params">Authentication parameters to be used for access token request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Access Token with expiry date</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Authenticator.GetTokenAsync(Microsoft.SqlTools.Authentication.AuthenticationParams,System.Threading.CancellationToken)">
            <summary>
            Acquires access token asynchronously.
            </summary>
            <param name="params">Authentication parameters to be used for access token request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Access Token with expiry date</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.IAuthenticator.GetToken(Microsoft.SqlTools.Authentication.AuthenticationParams,System.Threading.CancellationToken)">
            <summary>
            Acquires access token synchronously.
            </summary>
            <param name="params">Authentication parameters to be used for access token request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Access Token with expiry date</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.IAuthenticator.GetTokenAsync(Microsoft.SqlTools.Authentication.AuthenticationParams,System.Threading.CancellationToken)">
            <summary>
            Acquires access token asynchronously.
            </summary>
            <param name="params">Authentication parameters to be used for access token request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Access Token with expiry date</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper">
            <summary>
            This class provides capability to register MSAL Token cache and uses the beforeCacheAccess and afterCacheAccess callbacks 
            to read and write cache to file system. This is done as cache encryption/decryption algorithm is shared between NodeJS and .NET.
            Because, we cannot use msal-node-extensions in NodeJS, we also cannot use MSAL Extensions Dotnet NuGet package.
            Ref https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-node-migration#enable-token-caching
            In future we should use msal extensions to not have to maintain encryption logic in our applications, and also introduce support for
            token storage options in system keychain/credential store.
            However - as of now msal-node-extensions does not come with pre-compiled native libraries that causes runtime issues
            Ref https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/3332
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.IvKeyReadCallback">
            <summary>
            Callback delegate to be implemented by Services in Service Host, where authentication is performed. e.g. Connection Service.
            This delegate will be called to retrieve key and IV data if found absent or during instantiation.
            </summary>
            <param name="key">(out) Key used for encryption/decryption</param>
            <param name="iv">(out) IV used for encryption/decryption</param>
        </member>
        <member name="F:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper._lockObject">
            <summary>
            Lock objects for serialization
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper._cacheStorage">
            <summary>
            Storage that handles the storing of the MSAL cache file on disk.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.#ctor(Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration,Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.IvKeyReadCallback)">
            <summary>
            Instantiates cache encryption helper instance.
            </summary>
            <param name="config">Configuration containing cache location and name.</param>
            <param name="callback">Delegate callback to retrieve IV and Key from Credential Store when needed.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.RegisterCache(Microsoft.Identity.Client.ITokenCache)">
            <summary>
            Registers <paramref name="tokenCache"/> before and after access methods that are fired on cache access.
            </summary>
            <param name="tokenCache">Access token cache from MSAL.NET</param>
            <exception cref="T:System.ArgumentNullException">When token cache is not provided.</exception>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.AfterAccessNotification(Microsoft.Identity.Client.TokenCacheNotificationArgs)">
            <summary>
            Triggered after cache is accessed, <paramref name="args"/> provides updated cache data that
            needs to be updated in File Storage. We encrypt cache data here and store it in file system.
            </summary>
            <param name="args">Access token cache notification arguments.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.BeforeAccessNotification(Microsoft.Identity.Client.TokenCacheNotificationArgs)">
            <summary>
            Triggered before cache is accessed, we update <paramref name="args"/> with data from file storage.
            Cache file is decrypted and cache data is synced with MSAL.NET memory token cache.
            </summary>
            <param name="args">Access token cache notification arguments.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.CreateCrossPlatLock(Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties)">
            <summary>
            Gets a new instance of a lock for synchronizing against a cache made with the same creation properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.MsalEncryptedCacheHelper.ReleaseFileLock">
            <summary>
            Releases file lock by disposing it.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration">
            <summary>
            Configuration used by <see cref="T:Microsoft.SqlTools.Authentication.Authenticator"/> to perform Microsoft Entra authentication using MSAL.NET
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.AppClientId">
            <summary>
            Application Client ID to be used.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.AppName">
            <summary>
            Application name used for public client application instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.CacheFolderPath">
            <summary>
            Cache folder path, to be used by MSAL.NET to store encrypted token cache.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.CacheFileName">
            <summary>
            File name to be used for token storage.
            Full path of file: <see cref="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.CacheFolderPath"/> \ <see cref="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.CacheFileName"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.HttpProxyUrl">
            <summary>
            Proxy URL defined by end user.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Authentication.Utility.AuthenticatorConfiguration.HttpProxyStrictSSL">
            <summary>
            Whether the proxy server certificate must be verified against list of configured CAs.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.EncryptionUtils.AesEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts provided byte array with 'aes-256-cbc' algorithm.
            </summary>
            <param name="plainText">Plain text data</param>
            <param name="key">Encryption Key</param>
            <param name="iv">Encryption IV</param>
            <returns>Encrypted data in bytes</returns>
            <exception cref="T:System.ArgumentNullException">When arguments are null or empty.</exception>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.EncryptionUtils.AesDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts provided byte array with 'aes-256-cbc' algorithm.
            </summary>
            <param name="cipherText">Encrypted data</param>
            <param name="key">Encryption Key</param>
            <param name="iv">Encryption IV</param>
            <returns>Plain text data in bytes</returns>
            <exception cref="T:System.ArgumentNullException">When arguments are null or empty.</exception>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Utility.HttpClientProxyFactory">
            <summary>
            Implements Http Client Factory for Microsoft Identity Client to support proxy authentication.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.HttpClientProxyFactory.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor to construct instance with proxy URL provided.
            </summary>
            <param name="proxyUrl">Proxy URL to be used for network access.</param>
            <param name="proxyStrictSSL">Whether or not proxy server certficate must be strictly validated.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.HttpClientProxyFactory.GetHttpClient">
            <summary>
            Gets Http Client instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.HttpClientProxyFactory.ClearCredentials(System.Uri)">
            <summary>
            Creates and returns a credential-free URL for web proxy use.
            </summary>
            <param name="url">URI instance.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.Utils.isValidEmail(System.String)">
            <summary>
            Validates provided <paramref name="userEmail"/> follows email format.
            </summary>
            <param name="useremail">Email address</param>
            <returns>Whether email is in correct format.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Utility.Utils.MSALLogCallback(Microsoft.Identity.Client.LogLevel,System.String,System.Boolean)">
            <summary>
            Log callback handler used for MSAL Client applications.
            </summary>
            <param name="logLevel">Log level</param>
            <param name="message">Log message</param>
            <param name="pii">Whether message contains PII information.</param>
        </member>
        <member name="T:Microsoft.SqlTools.Authentication.Sql.AuthenticationProvider">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.Data.SqlClient.SqlAuthenticationProvider"/> for SQL Tools to be able to perform Federated authentication
            silently with Microsoft.Data.SqlClient integration only for Microsoft Entra authentication modes. 
            When registered, the SqlClient driver calls the <see cref="M:Microsoft.SqlTools.Authentication.Sql.AuthenticationProvider.AcquireTokenAsync(Microsoft.Data.SqlClient.SqlAuthenticationParameters)"/> API 
            with server-sent authority information to request access token when needed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Sql.AuthenticationProvider.#ctor(Microsoft.SqlTools.Authentication.IAuthenticator)">
            <summary>
            Instantiates AuthenticationProvider to be used for Microsoft Entra authentication with MSAL.NET and MSAL.js co-ordinated.
            </summary>
            <param name="applicationName">Application Name that identifies user folder path location for reading/writing to shared cache.</param>
            <param name="applicationPath">Application Path directory where application cache folder is present.</param>
            <param name="authCallback">Callback that handles Microsoft Entra authentication when user interaction is needed.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Sql.AuthenticationProvider.AcquireTokenAsync(Microsoft.Data.SqlClient.SqlAuthenticationParameters)">
            <summary>
            Acquires access token with provided <paramref name="parameters"/>
            </summary>
            <param name="parameters">Authentication parameters</param>
            <returns>Authentication token containing access token and expiry date.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Authentication.Sql.AuthenticationProvider.IsSupported(Microsoft.Data.SqlClient.SqlAuthenticationMethod)">
            <summary>
            Whether or not provided <paramref name="authenticationMethod"/> is supported.
            </summary>
            <param name="authenticationMethod">SQL Authentication method</param>
            <returns></returns>
        </member>
    </members>
</doc>
